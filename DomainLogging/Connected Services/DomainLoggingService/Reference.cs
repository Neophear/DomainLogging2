//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomainLogging.DomainLoggingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputerInfo", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    [System.SerializableAttribute()]
    public partial class ComputerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint CPUCoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DomainLogging.DomainLoggingService.DiskType DiskMediaTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DiskSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GFXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastAliveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint RAMGBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamViewerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUField, value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint CPUCores {
            get {
                return this.CPUCoresField;
            }
            set {
                if ((this.CPUCoresField.Equals(value) != true)) {
                    this.CPUCoresField = value;
                    this.RaisePropertyChanged("CPUCores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DomainLogging.DomainLoggingService.DiskType DiskMediaType {
            get {
                return this.DiskMediaTypeField;
            }
            set {
                if ((this.DiskMediaTypeField.Equals(value) != true)) {
                    this.DiskMediaTypeField = value;
                    this.RaisePropertyChanged("DiskMediaType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DiskSize {
            get {
                return this.DiskSizeField;
            }
            set {
                if ((this.DiskSizeField.Equals(value) != true)) {
                    this.DiskSizeField = value;
                    this.RaisePropertyChanged("DiskSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GFX {
            get {
                return this.GFXField;
            }
            set {
                if ((object.ReferenceEquals(this.GFXField, value) != true)) {
                    this.GFXField = value;
                    this.RaisePropertyChanged("GFX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastAlive {
            get {
                return this.LastAliveField;
            }
            set {
                if ((this.LastAliveField.Equals(value) != true)) {
                    this.LastAliveField = value;
                    this.RaisePropertyChanged("LastAlive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OS {
            get {
                return this.OSField;
            }
            set {
                if ((object.ReferenceEquals(this.OSField, value) != true)) {
                    this.OSField = value;
                    this.RaisePropertyChanged("OS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint RAMGB {
            get {
                return this.RAMGBField;
            }
            set {
                if ((this.RAMGBField.Equals(value) != true)) {
                    this.RAMGBField = value;
                    this.RaisePropertyChanged("RAMGB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamViewerId {
            get {
                return this.TeamViewerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamViewerIdField, value) != true)) {
                    this.TeamViewerIdField = value;
                    this.RaisePropertyChanged("TeamViewerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskType", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    public enum DiskType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HDD = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSD = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCM = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DomainLoggingService.IDomainLoggingService")]
    public interface IDomainLoggingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/WriteLog", ReplyAction="http://tempuri.org/IDomainLoggingService/WriteLogResponse")]
        bool WriteLog(string serialNumber, string username, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/WriteLog", ReplyAction="http://tempuri.org/IDomainLoggingService/WriteLogResponse")]
        System.Threading.Tasks.Task<bool> WriteLogAsync(string serialNumber, string username, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/SaveComputerInfo", ReplyAction="http://tempuri.org/IDomainLoggingService/SaveComputerInfoResponse")]
        void SaveComputerInfo(DomainLogging.DomainLoggingService.ComputerInfo computerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/SaveComputerInfo", ReplyAction="http://tempuri.org/IDomainLoggingService/SaveComputerInfoResponse")]
        System.Threading.Tasks.Task SaveComputerInfoAsync(DomainLogging.DomainLoggingService.ComputerInfo computerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/SaveComputerLocation", ReplyAction="http://tempuri.org/IDomainLoggingService/SaveComputerLocationResponse")]
        void SaveComputerLocation(string serialNumber, string myn, string byg, string lok, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/SaveComputerLocation", ReplyAction="http://tempuri.org/IDomainLoggingService/SaveComputerLocationResponse")]
        System.Threading.Tasks.Task SaveComputerLocationAsync(string serialNumber, string myn, string byg, string lok, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/WriteErrorLog", ReplyAction="http://tempuri.org/IDomainLoggingService/WriteErrorLogResponse")]
        void WriteErrorLog(string computerName, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/WriteErrorLog", ReplyAction="http://tempuri.org/IDomainLoggingService/WriteErrorLogResponse")]
        System.Threading.Tasks.Task WriteErrorLogAsync(string computerName, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/NeedsLocationUpdate", ReplyAction="http://tempuri.org/IDomainLoggingService/NeedsLocationUpdateResponse")]
        bool NeedsLocationUpdate(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainLoggingService/NeedsLocationUpdate", ReplyAction="http://tempuri.org/IDomainLoggingService/NeedsLocationUpdateResponse")]
        System.Threading.Tasks.Task<bool> NeedsLocationUpdateAsync(string serialNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDomainLoggingServiceChannel : DomainLogging.DomainLoggingService.IDomainLoggingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DomainLoggingServiceClient : System.ServiceModel.ClientBase<DomainLogging.DomainLoggingService.IDomainLoggingService>, DomainLogging.DomainLoggingService.IDomainLoggingService {
        
        public DomainLoggingServiceClient() {
        }
        
        public DomainLoggingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainLoggingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainLoggingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainLoggingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool WriteLog(string serialNumber, string username, string parameters) {
            return base.Channel.WriteLog(serialNumber, username, parameters);
        }
        
        public System.Threading.Tasks.Task<bool> WriteLogAsync(string serialNumber, string username, string parameters) {
            return base.Channel.WriteLogAsync(serialNumber, username, parameters);
        }
        
        public void SaveComputerInfo(DomainLogging.DomainLoggingService.ComputerInfo computerInfo) {
            base.Channel.SaveComputerInfo(computerInfo);
        }
        
        public System.Threading.Tasks.Task SaveComputerInfoAsync(DomainLogging.DomainLoggingService.ComputerInfo computerInfo) {
            return base.Channel.SaveComputerInfoAsync(computerInfo);
        }
        
        public void SaveComputerLocation(string serialNumber, string myn, string byg, string lok, string owner) {
            base.Channel.SaveComputerLocation(serialNumber, myn, byg, lok, owner);
        }
        
        public System.Threading.Tasks.Task SaveComputerLocationAsync(string serialNumber, string myn, string byg, string lok, string owner) {
            return base.Channel.SaveComputerLocationAsync(serialNumber, myn, byg, lok, owner);
        }
        
        public void WriteErrorLog(string computerName, string message) {
            base.Channel.WriteErrorLog(computerName, message);
        }
        
        public System.Threading.Tasks.Task WriteErrorLogAsync(string computerName, string message) {
            return base.Channel.WriteErrorLogAsync(computerName, message);
        }
        
        public bool NeedsLocationUpdate(string serialNumber) {
            return base.Channel.NeedsLocationUpdate(serialNumber);
        }
        
        public System.Threading.Tasks.Task<bool> NeedsLocationUpdateAsync(string serialNumber) {
            return base.Channel.NeedsLocationUpdateAsync(serialNumber);
        }
    }
}
