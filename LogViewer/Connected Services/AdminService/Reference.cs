//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogViewer.AdminService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputerInfo", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    [System.SerializableAttribute()]
    public partial class ComputerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint CPUCoresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LogViewer.AdminService.DiskType DiskMediaTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DiskSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GFXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastAliveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint RAMGBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamViewerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUField, value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint CPUCores {
            get {
                return this.CPUCoresField;
            }
            set {
                if ((this.CPUCoresField.Equals(value) != true)) {
                    this.CPUCoresField = value;
                    this.RaisePropertyChanged("CPUCores");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LogViewer.AdminService.DiskType DiskMediaType {
            get {
                return this.DiskMediaTypeField;
            }
            set {
                if ((this.DiskMediaTypeField.Equals(value) != true)) {
                    this.DiskMediaTypeField = value;
                    this.RaisePropertyChanged("DiskMediaType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DiskSize {
            get {
                return this.DiskSizeField;
            }
            set {
                if ((this.DiskSizeField.Equals(value) != true)) {
                    this.DiskSizeField = value;
                    this.RaisePropertyChanged("DiskSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GFX {
            get {
                return this.GFXField;
            }
            set {
                if ((object.ReferenceEquals(this.GFXField, value) != true)) {
                    this.GFXField = value;
                    this.RaisePropertyChanged("GFX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastAlive {
            get {
                return this.LastAliveField;
            }
            set {
                if ((this.LastAliveField.Equals(value) != true)) {
                    this.LastAliveField = value;
                    this.RaisePropertyChanged("LastAlive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OS {
            get {
                return this.OSField;
            }
            set {
                if ((object.ReferenceEquals(this.OSField, value) != true)) {
                    this.OSField = value;
                    this.RaisePropertyChanged("OS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint RAMGB {
            get {
                return this.RAMGBField;
            }
            set {
                if ((this.RAMGBField.Equals(value) != true)) {
                    this.RAMGBField = value;
                    this.RaisePropertyChanged("RAMGB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamViewerId {
            get {
                return this.TeamViewerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamViewerIdField, value) != true)) {
                    this.TeamViewerIdField = value;
                    this.RaisePropertyChanged("TeamViewerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskType", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    public enum DiskType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HDD = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSD = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCM = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputerLocation", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    [System.SerializableAttribute()]
    public partial class ComputerLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BYGField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MYNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BYG {
            get {
                return this.BYGField;
            }
            set {
                if ((object.ReferenceEquals(this.BYGField, value) != true)) {
                    this.BYGField = value;
                    this.RaisePropertyChanged("BYG");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOK {
            get {
                return this.LOKField;
            }
            set {
                if ((object.ReferenceEquals(this.LOKField, value) != true)) {
                    this.LOKField = value;
                    this.RaisePropertyChanged("LOK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MYN {
            get {
                return this.MYNField;
            }
            set {
                if ((object.ReferenceEquals(this.MYNField, value) != true)) {
                    this.MYNField = value;
                    this.RaisePropertyChanged("MYN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogEntry", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    [System.SerializableAttribute()]
    public partial class LogEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ComputerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ComputerId {
            get {
                return this.ComputerIdField;
            }
            set {
                if ((this.ComputerIdField.Equals(value) != true)) {
                    this.ComputerIdField = value;
                    this.RaisePropertyChanged("ComputerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DomainLoggingService.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminService.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfoFromId", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfoFromIdResponse")]
        LogViewer.AdminService.ComputerInfo GetComputerInfoFromId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfoFromId", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfoFromIdResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> GetComputerInfoFromIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfoFromSerialNumber", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfoFromSerialNumberResponse")]
        LogViewer.AdminService.ComputerInfo GetComputerInfoFromSerialNumber(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfoFromSerialNumber", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfoFromSerialNumberResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> GetComputerInfoFromSerialNumberAsync(string serialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerLocation", ReplyAction="http://tempuri.org/IAdminService/GetComputerLocationResponse")]
        LogViewer.AdminService.ComputerLocation GetComputerLocation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerLocation", ReplyAction="http://tempuri.org/IAdminService/GetComputerLocationResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.ComputerLocation> GetComputerLocationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfos", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfosResponse")]
        LogViewer.AdminService.ComputerInfo[] GetComputerInfos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerInfos", ReplyAction="http://tempuri.org/IAdminService/GetComputerInfosResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo[]> GetComputerInfosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/FindLastComputer", ReplyAction="http://tempuri.org/IAdminService/FindLastComputerResponse")]
        LogViewer.AdminService.ComputerInfo FindLastComputer(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/FindLastComputer", ReplyAction="http://tempuri.org/IAdminService/FindLastComputerResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> FindLastComputerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLog", ReplyAction="http://tempuri.org/IAdminService/GetLogResponse")]
        LogViewer.AdminService.LogEntry[] GetLog(int topRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLog", ReplyAction="http://tempuri.org/IAdminService/GetLogResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetLogAsync(int topRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerLog", ReplyAction="http://tempuri.org/IAdminService/GetComputerLogResponse")]
        LogViewer.AdminService.LogEntry[] GetComputerLog(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetComputerLog", ReplyAction="http://tempuri.org/IAdminService/GetComputerLogResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetComputerLogAsync(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUserLog", ReplyAction="http://tempuri.org/IAdminService/GetUserLogResponse")]
        LogViewer.AdminService.LogEntry[] GetUserLog(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUserLog", ReplyAction="http://tempuri.org/IAdminService/GetUserLogResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetUserLogAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUser", ReplyAction="http://tempuri.org/IAdminService/GetUserResponse")]
        LogViewer.AdminService.User GetUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUser", ReplyAction="http://tempuri.org/IAdminService/GetUserResponse")]
        System.Threading.Tasks.Task<LogViewer.AdminService.User> GetUserAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : LogViewer.AdminService.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<LogViewer.AdminService.IAdminService>, LogViewer.AdminService.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LogViewer.AdminService.ComputerInfo GetComputerInfoFromId(int id) {
            return base.Channel.GetComputerInfoFromId(id);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> GetComputerInfoFromIdAsync(int id) {
            return base.Channel.GetComputerInfoFromIdAsync(id);
        }
        
        public LogViewer.AdminService.ComputerInfo GetComputerInfoFromSerialNumber(string serialNumber) {
            return base.Channel.GetComputerInfoFromSerialNumber(serialNumber);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> GetComputerInfoFromSerialNumberAsync(string serialNumber) {
            return base.Channel.GetComputerInfoFromSerialNumberAsync(serialNumber);
        }
        
        public LogViewer.AdminService.ComputerLocation GetComputerLocation(int id) {
            return base.Channel.GetComputerLocation(id);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.ComputerLocation> GetComputerLocationAsync(int id) {
            return base.Channel.GetComputerLocationAsync(id);
        }
        
        public LogViewer.AdminService.ComputerInfo[] GetComputerInfos() {
            return base.Channel.GetComputerInfos();
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo[]> GetComputerInfosAsync() {
            return base.Channel.GetComputerInfosAsync();
        }
        
        public LogViewer.AdminService.ComputerInfo FindLastComputer(string username) {
            return base.Channel.FindLastComputer(username);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.ComputerInfo> FindLastComputerAsync(string username) {
            return base.Channel.FindLastComputerAsync(username);
        }
        
        public LogViewer.AdminService.LogEntry[] GetLog(int topRecords) {
            return base.Channel.GetLog(topRecords);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetLogAsync(int topRecords) {
            return base.Channel.GetLogAsync(topRecords);
        }
        
        public LogViewer.AdminService.LogEntry[] GetComputerLog(int computerId) {
            return base.Channel.GetComputerLog(computerId);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetComputerLogAsync(int computerId) {
            return base.Channel.GetComputerLogAsync(computerId);
        }
        
        public LogViewer.AdminService.LogEntry[] GetUserLog(string username) {
            return base.Channel.GetUserLog(username);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.LogEntry[]> GetUserLogAsync(string username) {
            return base.Channel.GetUserLogAsync(username);
        }
        
        public LogViewer.AdminService.User GetUser(string username) {
            return base.Channel.GetUser(username);
        }
        
        public System.Threading.Tasks.Task<LogViewer.AdminService.User> GetUserAsync(string username) {
            return base.Channel.GetUserAsync(username);
        }
    }
}
